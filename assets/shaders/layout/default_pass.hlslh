struct ViewInfo {
    float4x4 World;
    float4x4 View;
    float4x4 Project;
    float4x4 ViewProj;
};

[[vk::binding(0, 0)]] cbuffer global : register(b0, space0)
{
    float4x4 LightMatrix;
    float4 MainLightColor; // rgb: color a: intensity
    float4 MainLightDirection;
    float4 Viewport;
}

#if VIEW_COUNT > 1
[[vk::binding(1, 0)]] cbuffer view   : register(b1, space0)
{
    ViewInfo View[VIEW_COUNT];
}
#else
[[vk::binding(1, 0)]] cbuffer view   : register(b1, space0)
{
    ViewInfo View;
}
#endif

[[vk::binding(2, 0)]] Texture2D ShadowMap : register(t1, space0);
[[vk::binding(3, 0)]] SamplerState ShadowMapSampler : register(s1, space0);

[[vk::binding(4, 0)]] Texture2D BRDFLut : register(t2, space0);
[[vk::binding(5, 0)]] SamplerState BRDFLutSampler : register(s2, space0);

[[vk::binding(6, 0)]] TextureCube IrradianceMap : register(t3, space0);
[[vk::binding(7, 0)]] SamplerState IrradianceSampler : register(s3, space0);

[[vk::binding(8, 0)]] TextureCube PrefilteredMap : register(t4, space0);
[[vk::binding(9, 0)]] SamplerState PrefilteredMapSampler : register(s4, space0);

[[vk::binding(10, 0)]] Texture2D HizBuffer : register(t5, space0);
[[vk::binding(11, 0)]] SamplerState HizBufferSampler : register(s5, space0);